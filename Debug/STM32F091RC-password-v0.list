
STM32F091RC-password-v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000340  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080003fc  080003fc  000103fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000424  08000424  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000424  08000424  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000424  08000424  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000424  08000424  00010424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000428  08000428  00010428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800042c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000430  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000430  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000dbd  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004cc  00000000  00000000  00020de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000190  00000000  00000000  000212b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000148  00000000  00000000  00021448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188c8  00000000  00000000  00021590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f17  00000000  00000000  00039e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096a8a  00000000  00000000  0003bd6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d27f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000444  00000000  00000000  000d284c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080003e4 	.word	0x080003e4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	080003e4 	.word	0x080003e4

08000104 <ClockConfig>:
#define PB12 12
#define PB13 13

// Initialize GPIOA and GPIOB clock signal
void ClockConfig()
{
 8000104:	b580      	push	{r7, lr}
 8000106:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000108:	4b08      	ldr	r3, [pc, #32]	; (800012c <ClockConfig+0x28>)
 800010a:	695a      	ldr	r2, [r3, #20]
 800010c:	4b07      	ldr	r3, [pc, #28]	; (800012c <ClockConfig+0x28>)
 800010e:	2180      	movs	r1, #128	; 0x80
 8000110:	0289      	lsls	r1, r1, #10
 8000112:	430a      	orrs	r2, r1
 8000114:	615a      	str	r2, [r3, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000116:	4b05      	ldr	r3, [pc, #20]	; (800012c <ClockConfig+0x28>)
 8000118:	695a      	ldr	r2, [r3, #20]
 800011a:	4b04      	ldr	r3, [pc, #16]	; (800012c <ClockConfig+0x28>)
 800011c:	2180      	movs	r1, #128	; 0x80
 800011e:	02c9      	lsls	r1, r1, #11
 8000120:	430a      	orrs	r2, r1
 8000122:	615a      	str	r2, [r3, #20]
}
 8000124:	46c0      	nop			; (mov r8, r8)
 8000126:	46bd      	mov	sp, r7
 8000128:	bd80      	pop	{r7, pc}
 800012a:	46c0      	nop			; (mov r8, r8)
 800012c:	40021000 	.word	0x40021000

08000130 <PinConfig>:

// Configure the IO pins
void PinConfig()
{
 8000130:	b580      	push	{r7, lr}
 8000132:	b082      	sub	sp, #8
 8000134:	af00      	add	r7, sp, #0
    // Initialize PA4 and PA5 as output
    GPIOA->MODER |= (1 << 8);
 8000136:	2390      	movs	r3, #144	; 0x90
 8000138:	05db      	lsls	r3, r3, #23
 800013a:	681a      	ldr	r2, [r3, #0]
 800013c:	2390      	movs	r3, #144	; 0x90
 800013e:	05db      	lsls	r3, r3, #23
 8000140:	2180      	movs	r1, #128	; 0x80
 8000142:	0049      	lsls	r1, r1, #1
 8000144:	430a      	orrs	r2, r1
 8000146:	601a      	str	r2, [r3, #0]
    GPIOA->MODER |= (1 << 10);
 8000148:	2390      	movs	r3, #144	; 0x90
 800014a:	05db      	lsls	r3, r3, #23
 800014c:	681a      	ldr	r2, [r3, #0]
 800014e:	2390      	movs	r3, #144	; 0x90
 8000150:	05db      	lsls	r3, r3, #23
 8000152:	2180      	movs	r1, #128	; 0x80
 8000154:	00c9      	lsls	r1, r1, #3
 8000156:	430a      	orrs	r2, r1
 8000158:	601a      	str	r2, [r3, #0]

    // Initialize PB4-PB13 as inputs
    for(int i=4; i<=13; i++)
 800015a:	2304      	movs	r3, #4
 800015c:	607b      	str	r3, [r7, #4]
 800015e:	e00e      	b.n	800017e <PinConfig+0x4e>
    GPIOB->MODER &= ~(1 << (i*2));
 8000160:	4b0b      	ldr	r3, [pc, #44]	; (8000190 <PinConfig+0x60>)
 8000162:	681a      	ldr	r2, [r3, #0]
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	005b      	lsls	r3, r3, #1
 8000168:	2101      	movs	r1, #1
 800016a:	4099      	lsls	r1, r3
 800016c:	000b      	movs	r3, r1
 800016e:	43db      	mvns	r3, r3
 8000170:	0019      	movs	r1, r3
 8000172:	4b07      	ldr	r3, [pc, #28]	; (8000190 <PinConfig+0x60>)
 8000174:	400a      	ands	r2, r1
 8000176:	601a      	str	r2, [r3, #0]
    for(int i=4; i<=13; i++)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	3301      	adds	r3, #1
 800017c:	607b      	str	r3, [r7, #4]
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2b0d      	cmp	r3, #13
 8000182:	dded      	ble.n	8000160 <PinConfig+0x30>
}
 8000184:	46c0      	nop			; (mov r8, r8)
 8000186:	46c0      	nop			; (mov r8, r8)
 8000188:	46bd      	mov	sp, r7
 800018a:	b002      	add	sp, #8
 800018c:	bd80      	pop	{r7, pc}
 800018e:	46c0      	nop			; (mov r8, r8)
 8000190:	48000400 	.word	0x48000400

08000194 <main>:


int main(void)
{
 8000194:	b590      	push	{r4, r7, lr}
 8000196:	b09d      	sub	sp, #116	; 0x74
 8000198:	af00      	add	r7, sp, #0
	// Configure clock signals and IO pins
	ClockConfig();
 800019a:	f7ff ffb3 	bl	8000104 <ClockConfig>
	PinConfig();
 800019e:	f7ff ffc7 	bl	8000130 <PinConfig>

    const int correct_order[10] = {PB4, PB4, PB6, PB7, PB8, PB9, PB10, PB11, PB13, PB13};// Array with the correct button order
 80001a2:	232c      	movs	r3, #44	; 0x2c
 80001a4:	18fb      	adds	r3, r7, r3
 80001a6:	4a49      	ldr	r2, [pc, #292]	; (80002cc <main+0x138>)
 80001a8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80001aa:	c313      	stmia	r3!, {r0, r1, r4}
 80001ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80001ae:	c313      	stmia	r3!, {r0, r1, r4}
 80001b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80001b2:	c313      	stmia	r3!, {r0, r1, r4}
 80001b4:	6812      	ldr	r2, [r2, #0]
 80001b6:	601a      	str	r2, [r3, #0]
    int button_order[10] = {0}; // Array to keep track of the buttons pressed
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	0018      	movs	r0, r3
 80001bc:	2328      	movs	r3, #40	; 0x28
 80001be:	001a      	movs	r2, r3
 80001c0:	2100      	movs	r1, #0
 80001c2:	f000 f907 	bl	80003d4 <memset>
    int i = 0; // Variable to keep track how many times the buttons are pressed
 80001c6:	2300      	movs	r3, #0
 80001c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    int correct = 1; // This variable stores the result of "correct_order" and "button_order" comparison
 80001ca:	2301      	movs	r3, #1
 80001cc:	66bb      	str	r3, [r7, #104]	; 0x68

    while (1)
    {
        while (i < 10)
 80001ce:	e02e      	b.n	800022e <main+0x9a>
        {
            // Check if any of the buttons are pressed and if so than store info which button was pressed
            for (int j = 4; j <= 13; j++)
 80001d0:	2304      	movs	r3, #4
 80001d2:	667b      	str	r3, [r7, #100]	; 0x64
 80001d4:	e028      	b.n	8000228 <main+0x94>
            {
                if ((GPIOB->IDR & (1 << j)) == 0)
 80001d6:	4b3e      	ldr	r3, [pc, #248]	; (80002d0 <main+0x13c>)
 80001d8:	691b      	ldr	r3, [r3, #16]
 80001da:	2101      	movs	r1, #1
 80001dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80001de:	4091      	lsls	r1, r2
 80001e0:	000a      	movs	r2, r1
 80001e2:	4013      	ands	r3, r2
 80001e4:	d11d      	bne.n	8000222 <main+0x8e>
                {
                	button_order[i] = j;
 80001e6:	1d3b      	adds	r3, r7, #4
 80001e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80001ea:	0092      	lsls	r2, r2, #2
 80001ec:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80001ee:	50d1      	str	r1, [r2, r3]
                	i++;
 80001f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80001f2:	3301      	adds	r3, #1
 80001f4:	66fb      	str	r3, [r7, #108]	; 0x6c

                	// Wait until the button is released before continue
                	while ((GPIOB->IDR & (1 << j)) == 0)
 80001f6:	e000      	b.n	80001fa <main+0x66>
                	{
                		__NOP();
 80001f8:	46c0      	nop			; (mov r8, r8)
                	while ((GPIOB->IDR & (1 << j)) == 0)
 80001fa:	4b35      	ldr	r3, [pc, #212]	; (80002d0 <main+0x13c>)
 80001fc:	691b      	ldr	r3, [r3, #16]
 80001fe:	2101      	movs	r1, #1
 8000200:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000202:	4091      	lsls	r1, r2
 8000204:	000a      	movs	r2, r1
 8000206:	4013      	ands	r3, r2
 8000208:	d0f6      	beq.n	80001f8 <main+0x64>
                	}
                	// Add a small delay to filter unwanted noise while the button is being released
                	for (int k = 0; k<200000; k++)
 800020a:	2300      	movs	r3, #0
 800020c:	663b      	str	r3, [r7, #96]	; 0x60
 800020e:	e003      	b.n	8000218 <main+0x84>
                	{
                		__NOP();
 8000210:	46c0      	nop			; (mov r8, r8)
                	for (int k = 0; k<200000; k++)
 8000212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000214:	3301      	adds	r3, #1
 8000216:	663b      	str	r3, [r7, #96]	; 0x60
 8000218:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800021a:	4a2e      	ldr	r2, [pc, #184]	; (80002d4 <main+0x140>)
 800021c:	4293      	cmp	r3, r2
 800021e:	ddf7      	ble.n	8000210 <main+0x7c>
                	}

                    break;
 8000220:	e005      	b.n	800022e <main+0x9a>
            for (int j = 4; j <= 13; j++)
 8000222:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000224:	3301      	adds	r3, #1
 8000226:	667b      	str	r3, [r7, #100]	; 0x64
 8000228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800022a:	2b0d      	cmp	r3, #13
 800022c:	ddd3      	ble.n	80001d6 <main+0x42>
        while (i < 10)
 800022e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000230:	2b09      	cmp	r3, #9
 8000232:	ddcd      	ble.n	80001d0 <main+0x3c>
                }
            }
        }

        if (i == 10)
 8000234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000236:	2b0a      	cmp	r3, #10
 8000238:	d134      	bne.n	80002a4 <main+0x110>
        {
            correct = 1; // if the order is correct, this value stays "1"
 800023a:	2301      	movs	r3, #1
 800023c:	66bb      	str	r3, [r7, #104]	; 0x68

            // Compare the "button_order" array to the "correct_order" array
            for (int j = 0; j < 10; j++)
 800023e:	2300      	movs	r3, #0
 8000240:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000242:	e010      	b.n	8000266 <main+0xd2>
            {
                if (button_order[j] != correct_order[j])
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000248:	0092      	lsls	r2, r2, #2
 800024a:	58d2      	ldr	r2, [r2, r3]
 800024c:	232c      	movs	r3, #44	; 0x2c
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8000252:	0089      	lsls	r1, r1, #2
 8000254:	58cb      	ldr	r3, [r1, r3]
 8000256:	429a      	cmp	r2, r3
 8000258:	d002      	beq.n	8000260 <main+0xcc>
                {
                    correct = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	66bb      	str	r3, [r7, #104]	; 0x68
                    break;
 800025e:	e005      	b.n	800026c <main+0xd8>
            for (int j = 0; j < 10; j++)
 8000260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000262:	3301      	adds	r3, #1
 8000264:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000268:	2b09      	cmp	r3, #9
 800026a:	ddeb      	ble.n	8000244 <main+0xb0>
                }
            }

            // Turn on an LED depending on the result
            if (correct)
 800026c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800026e:	2b00      	cmp	r3, #0
 8000270:	d004      	beq.n	800027c <main+0xe8>
            {
                GPIOA->BSRR = (1 << 4);
 8000272:	2390      	movs	r3, #144	; 0x90
 8000274:	05db      	lsls	r3, r3, #23
 8000276:	2210      	movs	r2, #16
 8000278:	619a      	str	r2, [r3, #24]
 800027a:	e003      	b.n	8000284 <main+0xf0>
            }
            else
            {
                GPIOA->BSRR = (1 << 5);
 800027c:	2390      	movs	r3, #144	; 0x90
 800027e:	05db      	lsls	r3, r3, #23
 8000280:	2220      	movs	r2, #32
 8000282:	619a      	str	r2, [r3, #24]
            }

            // Reset the button press tracking variables
            i = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	66fb      	str	r3, [r7, #108]	; 0x6c
            for (int j = 0; j < 10; j++)
 8000288:	2300      	movs	r3, #0
 800028a:	65bb      	str	r3, [r7, #88]	; 0x58
 800028c:	e007      	b.n	800029e <main+0x10a>
            {
                button_order[j] = 0;
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000292:	0092      	lsls	r2, r2, #2
 8000294:	2100      	movs	r1, #0
 8000296:	50d1      	str	r1, [r2, r3]
            for (int j = 0; j < 10; j++)
 8000298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800029a:	3301      	adds	r3, #1
 800029c:	65bb      	str	r3, [r7, #88]	; 0x58
 800029e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80002a0:	2b09      	cmp	r3, #9
 80002a2:	ddf4      	ble.n	800028e <main+0xfa>
            }
        }

        // Display the result for few seconds
        for (int j = 0; j < 2000000; j++)
 80002a4:	2300      	movs	r3, #0
 80002a6:	657b      	str	r3, [r7, #84]	; 0x54
 80002a8:	e003      	b.n	80002b2 <main+0x11e>
        {
        	__NOP();
 80002aa:	46c0      	nop			; (mov r8, r8)
        for (int j = 0; j < 2000000; j++)
 80002ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80002ae:	3301      	adds	r3, #1
 80002b0:	657b      	str	r3, [r7, #84]	; 0x54
 80002b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80002b4:	4a08      	ldr	r2, [pc, #32]	; (80002d8 <main+0x144>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	ddf7      	ble.n	80002aa <main+0x116>
        }

        // Reset LEDs before the next password input attempt
        GPIOA->BRR = (1 << 4);
 80002ba:	2390      	movs	r3, #144	; 0x90
 80002bc:	05db      	lsls	r3, r3, #23
 80002be:	2210      	movs	r2, #16
 80002c0:	629a      	str	r2, [r3, #40]	; 0x28
        GPIOA->BRR = (1 << 5);
 80002c2:	2390      	movs	r3, #144	; 0x90
 80002c4:	05db      	lsls	r3, r3, #23
 80002c6:	2220      	movs	r2, #32
 80002c8:	629a      	str	r2, [r3, #40]	; 0x28
        while (i < 10)
 80002ca:	e7b0      	b.n	800022e <main+0x9a>
 80002cc:	080003fc 	.word	0x080003fc
 80002d0:	48000400 	.word	0x48000400
 80002d4:	00030d3f 	.word	0x00030d3f
 80002d8:	001e847f 	.word	0x001e847f

080002dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002e0:	e7fe      	b.n	80002e0 <NMI_Handler+0x4>

080002e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002e2:	b580      	push	{r7, lr}
 80002e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002e6:	e7fe      	b.n	80002e6 <HardFault_Handler+0x4>

080002e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80002ec:	46c0      	nop			; (mov r8, r8)
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002f2:	b580      	push	{r7, lr}
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000300:	f000 f832 	bl	8000368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000304:	46c0      	nop			; (mov r8, r8)
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800030a:	b580      	push	{r7, lr}
 800030c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000314:	480d      	ldr	r0, [pc, #52]	; (800034c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000316:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <LoopForever+0x6>)
  ldr r1, =_edata
 800031a:	490e      	ldr	r1, [pc, #56]	; (8000354 <LoopForever+0xa>)
  ldr r2, =_sidata
 800031c:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <LoopForever+0xe>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0b      	ldr	r2, [pc, #44]	; (800035c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000330:	4c0b      	ldr	r4, [pc, #44]	; (8000360 <LoopForever+0x16>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800033e:	f7ff ffe4 	bl	800030a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000342:	f000 f823 	bl	800038c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000346:	f7ff ff25 	bl	8000194 <main>

0800034a <LoopForever>:

LoopForever:
    b LoopForever
 800034a:	e7fe      	b.n	800034a <LoopForever>
  ldr   r0, =_estack
 800034c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000354:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000358:	0800042c 	.word	0x0800042c
  ldr r2, =_sbss
 800035c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000360:	20000024 	.word	0x20000024

08000364 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000364:	e7fe      	b.n	8000364 <ADC1_COMP_IRQHandler>
	...

08000368 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <HAL_IncTick+0x1c>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	001a      	movs	r2, r3
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <HAL_IncTick+0x20>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	18d2      	adds	r2, r2, r3
 8000378:	4b03      	ldr	r3, [pc, #12]	; (8000388 <HAL_IncTick+0x20>)
 800037a:	601a      	str	r2, [r3, #0]
}
 800037c:	46c0      	nop			; (mov r8, r8)
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	20000000 	.word	0x20000000
 8000388:	20000020 	.word	0x20000020

0800038c <__libc_init_array>:
 800038c:	b570      	push	{r4, r5, r6, lr}
 800038e:	2600      	movs	r6, #0
 8000390:	4d0c      	ldr	r5, [pc, #48]	; (80003c4 <__libc_init_array+0x38>)
 8000392:	4c0d      	ldr	r4, [pc, #52]	; (80003c8 <__libc_init_array+0x3c>)
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	10a4      	asrs	r4, r4, #2
 8000398:	42a6      	cmp	r6, r4
 800039a:	d109      	bne.n	80003b0 <__libc_init_array+0x24>
 800039c:	2600      	movs	r6, #0
 800039e:	f000 f821 	bl	80003e4 <_init>
 80003a2:	4d0a      	ldr	r5, [pc, #40]	; (80003cc <__libc_init_array+0x40>)
 80003a4:	4c0a      	ldr	r4, [pc, #40]	; (80003d0 <__libc_init_array+0x44>)
 80003a6:	1b64      	subs	r4, r4, r5
 80003a8:	10a4      	asrs	r4, r4, #2
 80003aa:	42a6      	cmp	r6, r4
 80003ac:	d105      	bne.n	80003ba <__libc_init_array+0x2e>
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	00b3      	lsls	r3, r6, #2
 80003b2:	58eb      	ldr	r3, [r5, r3]
 80003b4:	4798      	blx	r3
 80003b6:	3601      	adds	r6, #1
 80003b8:	e7ee      	b.n	8000398 <__libc_init_array+0xc>
 80003ba:	00b3      	lsls	r3, r6, #2
 80003bc:	58eb      	ldr	r3, [r5, r3]
 80003be:	4798      	blx	r3
 80003c0:	3601      	adds	r6, #1
 80003c2:	e7f2      	b.n	80003aa <__libc_init_array+0x1e>
 80003c4:	08000424 	.word	0x08000424
 80003c8:	08000424 	.word	0x08000424
 80003cc:	08000424 	.word	0x08000424
 80003d0:	08000428 	.word	0x08000428

080003d4 <memset>:
 80003d4:	0003      	movs	r3, r0
 80003d6:	1882      	adds	r2, r0, r2
 80003d8:	4293      	cmp	r3, r2
 80003da:	d100      	bne.n	80003de <memset+0xa>
 80003dc:	4770      	bx	lr
 80003de:	7019      	strb	r1, [r3, #0]
 80003e0:	3301      	adds	r3, #1
 80003e2:	e7f9      	b.n	80003d8 <memset+0x4>

080003e4 <_init>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr

080003f0 <_fini>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr
